openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_findAll
      summary: Get all users
      description: Get all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_0
        - Users
    post:
      operationId: UsersController_create
      summary: Create user
      description: Creates a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Bad request. Body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: *ref_0
  /user/{userId}:
    get:
      operationId: UsersController_findOne
      summary: Get single user by id
      description: Get single user by id
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: User not found
      tags: *ref_0
    put:
      operationId: UsersController_update
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '403':
          description: oldPassword is wrong
        '404':
          description: User not found
      tags: *ref_0
    delete:
      operationId: UsersController_remove
      summary: Delete user
      description: Deletes user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted
        '400':
          description: Bad request. userId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: User not found
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistsController_findAll
      summary: Gets all artists
      description: Gets all artists
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_1
        - Artists
    post:
      operationId: ArtistsController_create
      summary: Add new artist
      description: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistEntity'
        '400':
          description: Bad request. Body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistsController_findOne
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistEntity'
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist not found
      tags: *ref_1
    put:
      operationId: ArtistsController_update
      summary: Update artist information
      description: Update artist information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateArtistDto'
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist not found
      tags: *ref_1
    delete:
      operationId: ArtistsController_remove
      summary: Delete artist
      description: Delete artist from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist not found
      tags: *ref_1
  /track:
    get:
      operationId: TracksController_findAll
      summary: Get tracks list
      description: Gets all library tracks list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_2
        - Tracks
    post:
      operationId: TracksController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '400':
          description: Bad request. Body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: *ref_2
  /track/{id}:
    get:
      operationId: TracksController_findOne
      summary: Get single track by id
      description: Get single track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackEntity'
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track not found
      tags: *ref_2
    put:
      operationId: TracksController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTrackDto'
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track not found
      tags: *ref_2
    delete:
      operationId: TracksController_remove
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track not found
      tags: *ref_2
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get all favorites
      description: Gets all favorites artists, tracks and albums
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoriteEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_3
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to the favorites
      description: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Artist with id doesn't exist
      tags: *ref_3
    delete:
      operationId: FavoritesController_removeArtist
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. ArtistId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Artist was not found
      tags: *ref_3
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to the favorites
      description: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Track with id doesn't exist
      tags: *ref_3
    delete:
      operationId: FavoritesController_removeTrack
      summary: Delete track from favorites
      description: Delete track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. TrackId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Track was not found
      tags: *ref_3
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to the favorites
      description: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '422':
          description: Album with id doesn't exist
      tags: *ref_3
    delete:
      operationId: FavoritesController_removeAlbum
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album was not found
      tags: *ref_3
  /album:
    get:
      operationId: AlbumsController_findAll
      summary: Get albums list
      description: Gets all library albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumEntity'
        '401':
          description: Access token is missing or invalid
      tags: &ref_4
        - Albums
    post:
      operationId: AlbumsController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumEntity'
        '400':
          description: Bad request. Body does not contain required fields
        '401':
          description: Access token is missing or invalid
      tags: *ref_4
  /album/{id}:
    get:
      operationId: AlbumsController_findOne
      summary: Get single album by id
      description: Get single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumEntity'
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album not found
      tags: *ref_4
    put:
      operationId: AlbumsController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAlbumDto'
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album not found
      tags: *ref_4
    delete:
      operationId: AlbumsController_remove
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. AlbumId is invalid (not uuid)
        '401':
          description: Access token is missing or invalid
        '404':
          description: Album not found
      tags: *ref_4
info:
  title: Home Library Service
  description: Home music library service API description
  version: '1.0'
  contact: {}
tags:
  - name: Users
    description: ''
  - name: Artists
    description: ''
  - name: Albums
    description: ''
  - name: Tracks
    description: ''
  - name: Favorites
    description: ''
servers:
  - url: http://localhost:4000/
components:
  schemas:
    UserEntity:
      type: object
      properties:
        id:
          type: string
          description: uuid v4
          format: uuid
        login:
          type: string
          description: user login
          example: TestUser
        version:
          type: number
          description: increments on update
          example: 1
        createdAt:
          type: number
          description: timestamp of creation
          example: 1655000000
        updatedAt:
          type: number
          description: timestamp of last update
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: previous password
        newPassword:
          type: string
          description: new password
      required:
        - oldPassword
        - newPassword
    ArtistEntity:
      type: object
      properties:
        id:
          type: string
          description: uuid v4
          format: uuid
        name:
          type: string
          description: artist name
          example: Freddie Mercury
        grammy:
          type: boolean
          description: artist has Grammy
          example: 'false'
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: artist name
          example: Freddie Mercury
        grammy:
          type: boolean
          description: artist has Grammy
          example: 'false'
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: artist name
          example: Freddie Mercury
        grammy:
          type: boolean
          description: artist has Grammy
          example: 'true'
      required:
        - name
        - grammy
    TrackEntity:
      type: object
      properties:
        id:
          type: string
          description: uuid v4
          format: uuid
        name:
          type: string
          description: track name
          example: The Show Must Go On
        artistId:
          type: string
          description: refers to Artist
          format: uuid
        albumId:
          type: string
          description: refers to Album
          format: uuid
        duration:
          type: number
          description: track duration
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: track name
          example: The Show Must Go On
        artistId:
          type: string
          description: refers to Artist
          format: uuid
        albumId:
          type: string
          description: refers to Album
          format: uuid
        duration:
          type: number
          description: track duration
          example: 262
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: track name
          example: Bohemian Rhapsody
        artistId:
          type: string
          description: refers to Artist
          format: uuid
        albumId:
          type: string
          description: refers to Album
          format: uuid
        duration:
          type: number
          description: track duration
          example: 355
      required:
        - name
        - artistId
        - albumId
        - duration
    AlbumEntity:
      type: object
      properties:
        id:
          type: string
          description: uuid v4
          format: uuid
        name:
          type: string
          description: album name
          example: Innuendo
        year:
          type: number
          description: released
          example: 1990
        artistId:
          type: string
          description: refers to Artist
          format: uuid
      required:
        - id
        - name
        - year
        - artistId
    FavoriteEntity:
      type: object
      properties:
        artists:
          description: favorite artists ids
          type: array
          items:
            $ref: '#/components/schemas/ArtistEntity'
        albums:
          description: favorite albums ids
          type: array
          items:
            $ref: '#/components/schemas/AlbumEntity'
        tracks:
          description: favorite tracks ids
          type: array
          items:
            $ref: '#/components/schemas/TrackEntity'
      required:
        - artists
        - albums
        - tracks
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: album name
          example: Innuendo
        year:
          type: number
          description: released
          example: 1990
        artistId:
          type: string
          description: refers to Artist
          format: uuid
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: album name
          example: Innuendo
        year:
          type: number
          description: released
          example: 1991
        artistId:
          type: string
          description: refers to Artist
          format: uuid
      required:
        - name
        - year
        - artistId

    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /tracks:
    get:
      tags:
        - Track
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Track
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - duration
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /tracks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Track
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    put:
      tags:
        - Track
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 355
                albumId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - duration
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: integer
                    description: In seconds
                    example: 355
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
    delete:
      tags:
        - Track
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /albums:
    get:
      tags:
        - Album
      summary: Get albums list
      description: Gets all library alibums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Album
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          description: Almub is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /albums/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Album
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    put:
      tags:
        - Album
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
    delete:
      tags:
        - Album
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /artists:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Gets all artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Artist
      summary: Add new artist
      description: Add new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artist
      summary: Get single artist by id
      description: Get single artist by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    put:
      tags:
        - Artist
      summary: Update artist information
      description: Update artist information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        200:
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Delete artist from library
      responses:
        204:
          description: Delelted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Track with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. trackId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Album with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad. albumId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Artist with id doesn't exist.
    delete:
      tags:
        - Favorites
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted succesfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist was not found.
